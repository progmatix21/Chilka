{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Chilka docs","text":"<p>Chilka is a corpus builder and server with a pluggable backend.  The plugin architecture lets you use database backends of your choice.  The plugins also let you implement and enforce your own schema.</p> <p>For more visit: https://github.com/progmatix21/Chilka.</p> <p>This documentation is work-in-progress</p> <p>The only complete section is the Reference.  Other sections will be added progressively.  The demo clients can help you start using Chilka.</p>"},{"location":"reference/","title":"Reference","text":"<p>This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the <code>calculator</code> project code.</p> <p>Chilka is a corpus serving library with a basic sensible interface and a pluggable backend to accomodate different databases.</p> <p>Chilka implements the following interface:</p> <pre><code>- `add()`: Add a file to the corpus.\n- `remove()`: Remove a file from the corpus.\n- `list()`: List files from the corpus.\n- `readSents()`: Read sentences of a particular file based on conditions.\n- `readBlob()`: Get entire file as a text blob.\n</code></pre> <p>The plugin implementation lets you implement and enforce your own schema. The <code>plugin_args</code> argument lets you pass custom arguments to your plugin.</p>"},{"location":"reference/#chilka.CorpusClient","title":"<code>CorpusClient</code>","text":"<p>               Bases: <code>CorpusClientAPI</code></p> <p>Concrete class implementing the corpus API.</p> <p>Methods:</p> Name Description <code>add</code> <p>Add a file to the corpus</p> <code>remove</code> <p>Remove a file from the corpus</p> <code>readSents</code> <p>Read a file stored in the corpus as sentences</p> <code>readBlob</code> <p>Read a file stored in the corpus as text blob</p> <code>list</code> <p>List the files in the corpus</p> Source code in <code>chilka.py</code> <pre><code>class CorpusClient(CorpusClientAPI):\n    \"\"\"Concrete class implementing the corpus API.\n\n    Methods:\n        add(): Add a file to the corpus\n        remove(): Remove a file from the corpus\n        readSents(): Read a file stored in the corpus as sentences\n        readBlob(): Read a file stored in the corpus as text blob\n        list(): List the files in the corpus\n    \"\"\"\n\n    def __init__(self,db_name:str,connection_string:str,db_plugin=None,plugin_args={}):\n        \"\"\"Init method to accept database details.\n\n        Args:\n            db_name (str): The name of the database/corpus\n            connection_string (str): The address &amp; port of the database server\n            db_plugin (str): The name of the database plugin\n        Returns:\n            A corpus client object\n        \"\"\"\n\n        # Load the plugin\n        plugin_path = \"plugins.chilka_\" + db_plugin\n        plugin = importlib.import_module(plugin_path)\n\n        # Instantiate the plugin client\n        self.pu_client = plugin.CorpusClientImpl(db_name, connection_string,\n                                               plugin_args=plugin_args)\n\n\n    def add(self,filepath:str,plugin_args={}) -&gt; list:\n        \"\"\"Adds a file to the file list\n\n        Args:\n            filepath (str): The path of the file to add to the corpus\n        Returns:\n            list: The list of IDs of objects added\n\n        \"\"\"\n\n        #-----\n        return self.pu_client.add_impl(filepath, plugin_args=plugin_args)\n        #-----\n\n\n    def remove(self,filename:str,plugin_args={}) -&gt; bool:\n        \"\"\"Removes a file from the corpus\n\n        Args:\n            filename (str): The name of the file to be removed from the corpus\n        Returns:\n            bool: True if the collection was removed successfully, false if it\n            does not exist\n        \"\"\"\n\n        #------\n        return self.pu_client.remove_impl(filename,plugin_args=plugin_args)\n        #------\n\n\n    def readSents(self,filename:str,range_filter=None,kw_filter=None,plugin_args={}) -&gt; Iterator:\n        \"\"\"Returns a file as an iterator of {n:&lt;&gt;,sent:&lt;&gt;} dictionaries\n\n        Args:\n            filename (str): The name of the file/collection to be read\n            range_filter (tuple): (optional)Range of lines to read\n            kw_filter (str): (optional)Search term to return sentences containing it\n        returns:\n            iterator: An iterator of dictionaries containing sentences from the file\n            with serial number starting from 1\n        \"\"\"\n\n        return self.pu_client.readSents_impl(filename,range_filter=range_filter,\n                                             kw_filter=kw_filter,\n                                             plugin_args=plugin_args)\n\n\n    def readBlob(self,filename:str,plugin_args={}) -&gt; str:\n        \"\"\"Reads a file as a text blob\n\n        Args:\n            filename (str): The name of the file to be read\n        returns:\n            str: File content as a single string\n        \"\"\"\n\n        return self.pu_client.readBlob_impl(filename, plugin_args=plugin_args)\n\n\n    def list(self,plugin_args={}) -&gt; list:\n        \"\"\"List the files in the corpus\n\n        Args:\n            None\n        returns:\n            list (str): A list containing filenames in the corpus\n        \"\"\"\n        #return self.db.list_collection_names()\n        # Use the plugin reference to get list of filenames\n\n        return self.pu_client.list_impl(plugin_args = plugin_args)\n</code></pre>"},{"location":"reference/#chilka.CorpusClient.__init__","title":"<code>__init__(db_name, connection_string, db_plugin=None, plugin_args={})</code>","text":"<p>Init method to accept database details.</p> <p>Parameters:</p> Name Type Description Default <code>db_name</code> <code>str</code> <p>The name of the database/corpus</p> required <code>connection_string</code> <code>str</code> <p>The address &amp; port of the database server</p> required <code>db_plugin</code> <code>str</code> <p>The name of the database plugin</p> <code>None</code> <p>Returns:     A corpus client object</p> Source code in <code>chilka.py</code> <pre><code>def __init__(self,db_name:str,connection_string:str,db_plugin=None,plugin_args={}):\n    \"\"\"Init method to accept database details.\n\n    Args:\n        db_name (str): The name of the database/corpus\n        connection_string (str): The address &amp; port of the database server\n        db_plugin (str): The name of the database plugin\n    Returns:\n        A corpus client object\n    \"\"\"\n\n    # Load the plugin\n    plugin_path = \"plugins.chilka_\" + db_plugin\n    plugin = importlib.import_module(plugin_path)\n\n    # Instantiate the plugin client\n    self.pu_client = plugin.CorpusClientImpl(db_name, connection_string,\n                                           plugin_args=plugin_args)\n</code></pre>"},{"location":"reference/#chilka.CorpusClient.add","title":"<code>add(filepath, plugin_args={})</code>","text":"<p>Adds a file to the file list</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path of the file to add to the corpus</p> required <p>Returns:     list: The list of IDs of objects added</p> Source code in <code>chilka.py</code> <pre><code>def add(self,filepath:str,plugin_args={}) -&gt; list:\n    \"\"\"Adds a file to the file list\n\n    Args:\n        filepath (str): The path of the file to add to the corpus\n    Returns:\n        list: The list of IDs of objects added\n\n    \"\"\"\n\n    #-----\n    return self.pu_client.add_impl(filepath, plugin_args=plugin_args)\n</code></pre>"},{"location":"reference/#chilka.CorpusClient.list","title":"<code>list(plugin_args={})</code>","text":"<p>List the files in the corpus</p> <p>returns:     list (str): A list containing filenames in the corpus</p> Source code in <code>chilka.py</code> <pre><code>def list(self,plugin_args={}) -&gt; list:\n    \"\"\"List the files in the corpus\n\n    Args:\n        None\n    returns:\n        list (str): A list containing filenames in the corpus\n    \"\"\"\n    #return self.db.list_collection_names()\n    # Use the plugin reference to get list of filenames\n\n    return self.pu_client.list_impl(plugin_args = plugin_args)\n</code></pre>"},{"location":"reference/#chilka.CorpusClient.readBlob","title":"<code>readBlob(filename, plugin_args={})</code>","text":"<p>Reads a file as a text blob</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The name of the file to be read</p> required <p>returns:     str: File content as a single string</p> Source code in <code>chilka.py</code> <pre><code>def readBlob(self,filename:str,plugin_args={}) -&gt; str:\n    \"\"\"Reads a file as a text blob\n\n    Args:\n        filename (str): The name of the file to be read\n    returns:\n        str: File content as a single string\n    \"\"\"\n\n    return self.pu_client.readBlob_impl(filename, plugin_args=plugin_args)\n</code></pre>"},{"location":"reference/#chilka.CorpusClient.readSents","title":"<code>readSents(filename, range_filter=None, kw_filter=None, plugin_args={})</code>","text":"<p>Returns a file as an iterator of {n:&lt;&gt;,sent:&lt;&gt;} dictionaries</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The name of the file/collection to be read</p> required <code>range_filter</code> <code>tuple</code> <p>(optional)Range of lines to read</p> <code>None</code> <code>kw_filter</code> <code>str</code> <p>(optional)Search term to return sentences containing it</p> <code>None</code> <p>returns:     iterator: An iterator of dictionaries containing sentences from the file     with serial number starting from 1</p> Source code in <code>chilka.py</code> <pre><code>def readSents(self,filename:str,range_filter=None,kw_filter=None,plugin_args={}) -&gt; Iterator:\n    \"\"\"Returns a file as an iterator of {n:&lt;&gt;,sent:&lt;&gt;} dictionaries\n\n    Args:\n        filename (str): The name of the file/collection to be read\n        range_filter (tuple): (optional)Range of lines to read\n        kw_filter (str): (optional)Search term to return sentences containing it\n    returns:\n        iterator: An iterator of dictionaries containing sentences from the file\n        with serial number starting from 1\n    \"\"\"\n\n    return self.pu_client.readSents_impl(filename,range_filter=range_filter,\n                                         kw_filter=kw_filter,\n                                         plugin_args=plugin_args)\n</code></pre>"},{"location":"reference/#chilka.CorpusClient.remove","title":"<code>remove(filename, plugin_args={})</code>","text":"<p>Removes a file from the corpus</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The name of the file to be removed from the corpus</p> required <p>Returns:     bool: True if the collection was removed successfully, false if it     does not exist</p> Source code in <code>chilka.py</code> <pre><code>def remove(self,filename:str,plugin_args={}) -&gt; bool:\n    \"\"\"Removes a file from the corpus\n\n    Args:\n        filename (str): The name of the file to be removed from the corpus\n    Returns:\n        bool: True if the collection was removed successfully, false if it\n        does not exist\n    \"\"\"\n\n    #------\n    return self.pu_client.remove_impl(filename,plugin_args=plugin_args)\n</code></pre>"},{"location":"reference/#chilka.CorpusClientAPI","title":"<code>CorpusClientAPI</code>","text":"<p>Abstract base class defining the corpus API.</p> <p>Methods:</p> Name Description <code>add</code> <p>Add a file to the corpus</p> <code>remove</code> <p>Remove a file from the corpus</p> <code>readSents</code> <p>Read a file stored in the corpus as sentences</p> <code>readBlob</code> <p>Read a file stored in the corpus as text blob</p> <code>list</code> <p>List the files in the corpus</p> Source code in <code>chilka.py</code> <pre><code>class CorpusClientAPI(metaclass=abc.ABCMeta):\n    \"\"\"Abstract base class defining the corpus API.\n\n    Methods:\n        add(): Add a file to the corpus\n        remove(): Remove a file from the corpus\n        readSents(): Read a file stored in the corpus as sentences\n        readBlob(): Read a file stored in the corpus as text blob\n        list(): List the files in the corpus\n    \"\"\"\n    @abc.abstractmethod\n    def __init__(self,db_name:str,connection_string:str,db_plugin=None,plugin_args={}):\n        \"\"\"Init method to accept database details.\n\n        Args:\n            db_name (str): The name of the database/corpus\n            connection_string (str): The address &amp; port of the database server\n            db_plugin (str): The name of the database plugin\n        Returns:\n            A corpus client object\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abc.abstractmethod\n    def add(self,filepath:str,plugin_args={}) -&gt; list:\n        \"\"\"Adds a file to the file list\n\n        Args:\n            filepath (str): The path of the file to add to the corpus\n        Returns:\n            list: The list of IDs of objects added\n\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abc.abstractmethod\n    def remove(self,filename:str,plugin_args={}) -&gt; bool:\n        \"\"\"Removes a file from the corpus\n\n        Args:\n            filename (str): The name of the file to be removed from the corpus\n        Returns:\n            bool: True if the collection was removed successfully, false if it\n            does not exist\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abc.abstractmethod\n    def readSents(self,filename:str,range_filter:tuple=None,kw_filter:str=None,plugin_args={}) -&gt; Iterator:\n        \"\"\"Returns a file as an iterator of {n:&lt;&gt;,sent:&lt;&gt;} dictionaries\n\n        Args:\n            filename (str): The name of the file to be read\n            range_filter (tuple): (optional)Range of lines to read\n            kw_filter (str): (optional)Search term to return sentences containing it\n        returns:\n            iterator: An iterator of dictionaries containing sentences from the file\n            with serial number starting from 1\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abc.abstractmethod\n    def readBlob(self,filename:str,plugin_args={}) -&gt; str:\n        \"\"\"Reads a file as a text blob\n\n        Args:\n            filename (str): The name of the file to be read\n        returns:\n            str: File content as a single string\n        \"\"\"\n\n        raise NotImplementedError\n\n    @abc.abstractmethod\n    def list(self,plugin_args={}) -&gt; list:\n        \"\"\"List the files in the corpus\n\n        Args:\n            None\n        returns:\n            list (str): A list containing filenames in the corpus\n        \"\"\"\n\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/#chilka.CorpusClientAPI.__init__","title":"<code>__init__(db_name, connection_string, db_plugin=None, plugin_args={})</code>  <code>abstractmethod</code>","text":"<p>Init method to accept database details.</p> <p>Parameters:</p> Name Type Description Default <code>db_name</code> <code>str</code> <p>The name of the database/corpus</p> required <code>connection_string</code> <code>str</code> <p>The address &amp; port of the database server</p> required <code>db_plugin</code> <code>str</code> <p>The name of the database plugin</p> <code>None</code> <p>Returns:     A corpus client object</p> Source code in <code>chilka.py</code> <pre><code>@abc.abstractmethod\ndef __init__(self,db_name:str,connection_string:str,db_plugin=None,plugin_args={}):\n    \"\"\"Init method to accept database details.\n\n    Args:\n        db_name (str): The name of the database/corpus\n        connection_string (str): The address &amp; port of the database server\n        db_plugin (str): The name of the database plugin\n    Returns:\n        A corpus client object\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/#chilka.CorpusClientAPI.add","title":"<code>add(filepath, plugin_args={})</code>  <code>abstractmethod</code>","text":"<p>Adds a file to the file list</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path of the file to add to the corpus</p> required <p>Returns:     list: The list of IDs of objects added</p> Source code in <code>chilka.py</code> <pre><code>@abc.abstractmethod\ndef add(self,filepath:str,plugin_args={}) -&gt; list:\n    \"\"\"Adds a file to the file list\n\n    Args:\n        filepath (str): The path of the file to add to the corpus\n    Returns:\n        list: The list of IDs of objects added\n\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/#chilka.CorpusClientAPI.list","title":"<code>list(plugin_args={})</code>  <code>abstractmethod</code>","text":"<p>List the files in the corpus</p> <p>returns:     list (str): A list containing filenames in the corpus</p> Source code in <code>chilka.py</code> <pre><code>@abc.abstractmethod\ndef list(self,plugin_args={}) -&gt; list:\n    \"\"\"List the files in the corpus\n\n    Args:\n        None\n    returns:\n        list (str): A list containing filenames in the corpus\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/#chilka.CorpusClientAPI.readBlob","title":"<code>readBlob(filename, plugin_args={})</code>  <code>abstractmethod</code>","text":"<p>Reads a file as a text blob</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The name of the file to be read</p> required <p>returns:     str: File content as a single string</p> Source code in <code>chilka.py</code> <pre><code>@abc.abstractmethod\ndef readBlob(self,filename:str,plugin_args={}) -&gt; str:\n    \"\"\"Reads a file as a text blob\n\n    Args:\n        filename (str): The name of the file to be read\n    returns:\n        str: File content as a single string\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/#chilka.CorpusClientAPI.readSents","title":"<code>readSents(filename, range_filter=None, kw_filter=None, plugin_args={})</code>  <code>abstractmethod</code>","text":"<p>Returns a file as an iterator of {n:&lt;&gt;,sent:&lt;&gt;} dictionaries</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The name of the file to be read</p> required <code>range_filter</code> <code>tuple</code> <p>(optional)Range of lines to read</p> <code>None</code> <code>kw_filter</code> <code>str</code> <p>(optional)Search term to return sentences containing it</p> <code>None</code> <p>returns:     iterator: An iterator of dictionaries containing sentences from the file     with serial number starting from 1</p> Source code in <code>chilka.py</code> <pre><code>@abc.abstractmethod\ndef readSents(self,filename:str,range_filter:tuple=None,kw_filter:str=None,plugin_args={}) -&gt; Iterator:\n    \"\"\"Returns a file as an iterator of {n:&lt;&gt;,sent:&lt;&gt;} dictionaries\n\n    Args:\n        filename (str): The name of the file to be read\n        range_filter (tuple): (optional)Range of lines to read\n        kw_filter (str): (optional)Search term to return sentences containing it\n    returns:\n        iterator: An iterator of dictionaries containing sentences from the file\n        with serial number starting from 1\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/#chilka.CorpusClientAPI.remove","title":"<code>remove(filename, plugin_args={})</code>  <code>abstractmethod</code>","text":"<p>Removes a file from the corpus</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The name of the file to be removed from the corpus</p> required <p>Returns:     bool: True if the collection was removed successfully, false if it     does not exist</p> Source code in <code>chilka.py</code> <pre><code>@abc.abstractmethod\ndef remove(self,filename:str,plugin_args={}) -&gt; bool:\n    \"\"\"Removes a file from the corpus\n\n    Args:\n        filename (str): The name of the file to be removed from the corpus\n    Returns:\n        bool: True if the collection was removed successfully, false if it\n        does not exist\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"}]}